
// Generated from CEQLQueryLexer.g4 by ANTLR 4.12.0


#include "CEQLQueryLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CEQLQueryLexerStaticData final {
  CEQLQueryLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CEQLQueryLexerStaticData(const CEQLQueryLexerStaticData&) = delete;
  CEQLQueryLexerStaticData(CEQLQueryLexerStaticData&&) = delete;
  CEQLQueryLexerStaticData& operator=(const CEQLQueryLexerStaticData&) = delete;
  CEQLQueryLexerStaticData& operator=(CEQLQueryLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag ceqlquerylexerLexerOnceFlag;
CEQLQueryLexerStaticData *ceqlquerylexerLexerStaticData = nullptr;

void ceqlquerylexerLexerInitialize() {
  assert(ceqlquerylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<CEQLQueryLexerStaticData>(
    std::vector<std::string>{
      "K_ALL", "K_AND", "K_ANY", "K_AS", "K_BY", "K_CONSUME", "K_DISTINCT", 
      "K_EVENT", "K_EVENTS", "K_FILTER", "K_FROM", "K_HOURS", "K_IN", "K_LAST", 
      "K_LIKE", "K_MAX", "K_MINUTES", "K_NEXT", "K_NONE", "K_NOT", "K_OR", 
      "K_PARTITION", "K_RANGE", "K_SECONDS", "K_SELECT", "K_STREAM", "K_STRICT", 
      "K_UNLESS", "K_WHERE", "K_WITHIN", "PERCENT", "PLUS", "MINUS", "STAR", 
      "SLASH", "LE", "LEQ", "GE", "GEQ", "EQ", "NEQ", "SEMICOLON", "COLON", 
      "COMMA", "DOUBLE_DOT", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "LEFT_SQUARE_BRACKET", 
      "RIGHT_SQUARE_BRACKET", "LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", 
      "COLON_PLUS", "IDENTIFIER", "DOUBLE_LITERAL", "INTEGER_LITERAL", "NUMERICAL_EXPONENT", 
      "STRING_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
      "UNEXPECTED_CHAR", "DIGIT", "A", "B", "C", "D", "E", "F", "G", "H", 
      "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", 
      "W", "X", "Y", "Z", "REGEX_START", "REGEX_END", "REGEX_END_ESCAPED", 
      "REGEX_PIPE", "REGEX_EXCLAMAITON", "REGEX_L_CURLY", "REGEX_R_CURLY", 
      "REGEX_L_PAR", "REGEX_R_PAR", "REGEX_COMMA", "REGEX_QUESTION", "REGEX_PLUS", 
      "REGEX_STAR", "REGEX_HAT", "REGEX_HYPHEN", "REGEX_L_BRACK", "REGEX_R_BRACK", 
      "REGEX_BACKSLASH", "REGEX_ALPHA", "REGEX_DOT", "REGEX_DOUBLED_DOT", 
      "UNRECOGNIZED", "REGEX_DECIMAL_DIGIT", "REGEX_NOT_DECIMAL_DIGIT", 
      "REGEX_WHITESPACE", "REGEX_NOT_WHITESPACE", "REGEX_ALPHANUMERIC", 
      "REGEX_NOT_ALPHANUMERIC", "REGEX_DIGIT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE", "REGEX"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'%'", "", 
      "", "", "'/'", "'<'", "'<='", "'>'", "'>='", "", "", "';'", "':'", 
      "", "", "", "", "", "", "", "", "':+'", "", "", "", "", "", "", "", 
      "", "", "'<<'", "'>>'", "'\\>'", "'|'", "'!'", "", "", "", "", "", 
      "'\\u003F'", "", "", "'^'", "", "", "", "'\\'", "", "'.'", "", "", 
      "'\\d'", "'\\D'", "'\\s'", "'\\S'", "'\\w'", "'\\W'"
    },
    std::vector<std::string>{
      "", "K_ALL", "K_AND", "K_ANY", "K_AS", "K_BY", "K_CONSUME", "K_DISTINCT", 
      "K_EVENT", "K_EVENTS", "K_FILTER", "K_FROM", "K_HOURS", "K_IN", "K_LAST", 
      "K_LIKE", "K_MAX", "K_MINUTES", "K_NEXT", "K_NONE", "K_NOT", "K_OR", 
      "K_PARTITION", "K_RANGE", "K_SECONDS", "K_SELECT", "K_STREAM", "K_STRICT", 
      "K_UNLESS", "K_WHERE", "K_WITHIN", "PERCENT", "PLUS", "MINUS", "STAR", 
      "SLASH", "LE", "LEQ", "GE", "GEQ", "EQ", "NEQ", "SEMICOLON", "COLON", 
      "COMMA", "DOUBLE_DOT", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "LEFT_SQUARE_BRACKET", 
      "RIGHT_SQUARE_BRACKET", "LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", 
      "COLON_PLUS", "IDENTIFIER", "DOUBLE_LITERAL", "INTEGER_LITERAL", "NUMERICAL_EXPONENT", 
      "STRING_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
      "UNEXPECTED_CHAR", "REGEX_START", "REGEX_END", "REGEX_END_ESCAPED", 
      "REGEX_PIPE", "REGEX_EXCLAMAITON", "REGEX_L_CURLY", "REGEX_R_CURLY", 
      "REGEX_L_PAR", "REGEX_R_PAR", "REGEX_COMMA", "REGEX_QUESTION", "REGEX_PLUS", 
      "REGEX_STAR", "REGEX_HAT", "REGEX_HYPHEN", "REGEX_L_BRACK", "REGEX_R_BRACK", 
      "REGEX_BACKSLASH", "REGEX_ALPHA", "REGEX_DOT", "REGEX_DOUBLED_DOT", 
      "UNRECOGNIZED", "REGEX_DECIMAL_DIGIT", "REGEX_NOT_DECIMAL_DIGIT", 
      "REGEX_WHITESPACE", "REGEX_NOT_WHITESPACE", "REGEX_ALPHANUMERIC", 
      "REGEX_NOT_ALPHANUMERIC", "REGEX_DIGIT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,90,696,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
  	2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
  	13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,
  	20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,
  	27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
  	34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
  	41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,
  	48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,
  	55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,
  	62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,
  	69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,
  	76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,
  	83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,
  	90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,
  	97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
  	2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,
  	2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,
  	2,116,7,116,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,
  	3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
  	1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
  	9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
  	11,3,11,302,8,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
  	14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,
  	16,328,8,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,
  	19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
  	21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,3,23,370,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,
  	27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,
  	29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,
  	35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,3,39,436,8,
  	39,1,40,1,40,1,40,1,40,3,40,442,8,40,1,41,1,41,1,42,1,42,1,43,1,43,1,
  	44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,
  	50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,5,52,472,8,52,10,52,12,52,475,9,
  	52,1,52,1,52,1,52,5,52,480,8,52,10,52,12,52,483,9,52,3,52,485,8,52,1,
  	53,1,53,1,53,1,53,1,53,3,53,492,8,53,1,53,1,53,4,53,496,8,53,11,53,12,
  	53,497,1,53,3,53,501,8,53,1,53,1,53,4,53,505,8,53,11,53,12,53,506,1,53,
  	1,53,3,53,511,8,53,1,54,4,54,514,8,54,11,54,12,54,515,1,55,1,55,3,55,
  	520,8,55,1,55,4,55,523,8,55,11,55,12,55,524,1,56,1,56,1,56,1,56,5,56,
  	531,8,56,10,56,12,56,534,9,56,1,56,1,56,1,57,1,57,1,57,1,57,5,57,542,
  	8,57,10,57,12,57,545,9,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,553,8,58,
  	10,58,12,58,556,9,58,1,58,1,58,1,58,3,58,561,8,58,1,58,1,58,1,59,1,59,
  	1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,
  	1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,
  	1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,
  	1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,
  	1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,90,1,90,
  	1,90,1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,96,1,96,1,97,
  	1,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,101,1,102,1,102,1,103,1,
  	103,1,104,1,104,1,105,1,105,1,106,1,106,1,107,1,107,1,108,1,108,1,108,
  	1,109,1,109,1,110,1,110,1,110,1,111,1,111,1,111,1,112,1,112,1,112,1,113,
  	1,113,1,113,1,114,1,114,1,114,1,115,1,115,1,115,1,116,1,116,1,554,0,117,
  	2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,9,20,10,22,11,24,12,26,13,28,14,
  	30,15,32,16,34,17,36,18,38,19,40,20,42,21,44,22,46,23,48,24,50,25,52,
  	26,54,27,56,28,58,29,60,30,62,31,64,32,66,33,68,34,70,35,72,36,74,37,
  	76,38,78,39,80,40,82,41,84,42,86,43,88,44,90,45,92,46,94,47,96,48,98,
  	49,100,50,102,51,104,52,106,53,108,54,110,55,112,56,114,57,116,58,118,
  	59,120,60,122,61,124,0,126,0,128,0,130,0,132,0,134,0,136,0,138,0,140,
  	0,142,0,144,0,146,0,148,0,150,0,152,0,154,0,156,0,158,0,160,0,162,0,164,
  	0,166,0,168,0,170,0,172,0,174,0,176,0,178,62,180,63,182,64,184,65,186,
  	66,188,67,190,68,192,69,194,70,196,71,198,72,200,73,202,74,204,75,206,
  	76,208,77,210,78,212,79,214,80,216,81,218,82,220,83,222,84,224,85,226,
  	86,228,87,230,88,232,89,234,90,2,0,1,34,1,0,96,96,3,0,65,90,95,95,97,
  	122,4,0,48,57,65,90,95,95,97,122,1,0,39,39,2,0,10,10,13,13,3,0,9,11,13,
  	13,32,32,1,0,48,57,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,
  	0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,
  	2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,
  	2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,
  	2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,115,
  	2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,
  	2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,122,2,0,65,90,97,122,
  	690,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,
  	1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,
  	0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,
  	0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,
  	1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,
  	0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,
  	0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,
  	1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,0,0,86,1,0,
  	0,0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,0,0,96,1,0,0,0,
  	0,98,1,0,0,0,0,100,1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,1,0,0,0,
  	0,108,1,0,0,0,0,110,1,0,0,0,0,112,1,0,0,0,0,114,1,0,0,0,0,116,1,0,0,0,
  	0,118,1,0,0,0,0,120,1,0,0,0,0,122,1,0,0,0,0,178,1,0,0,0,1,180,1,0,0,0,
  	1,182,1,0,0,0,1,184,1,0,0,0,1,186,1,0,0,0,1,188,1,0,0,0,1,190,1,0,0,0,
  	1,192,1,0,0,0,1,194,1,0,0,0,1,196,1,0,0,0,1,198,1,0,0,0,1,200,1,0,0,0,
  	1,202,1,0,0,0,1,204,1,0,0,0,1,206,1,0,0,0,1,208,1,0,0,0,1,210,1,0,0,0,
  	1,212,1,0,0,0,1,214,1,0,0,0,1,216,1,0,0,0,1,218,1,0,0,0,1,220,1,0,0,0,
  	1,222,1,0,0,0,1,224,1,0,0,0,1,226,1,0,0,0,1,228,1,0,0,0,1,230,1,0,0,0,
  	1,232,1,0,0,0,1,234,1,0,0,0,2,236,1,0,0,0,4,240,1,0,0,0,6,244,1,0,0,0,
  	8,248,1,0,0,0,10,251,1,0,0,0,12,254,1,0,0,0,14,262,1,0,0,0,16,271,1,0,
  	0,0,18,277,1,0,0,0,20,284,1,0,0,0,22,291,1,0,0,0,24,296,1,0,0,0,26,303,
  	1,0,0,0,28,306,1,0,0,0,30,311,1,0,0,0,32,316,1,0,0,0,34,320,1,0,0,0,36,
  	329,1,0,0,0,38,334,1,0,0,0,40,339,1,0,0,0,42,343,1,0,0,0,44,346,1,0,0,
  	0,46,356,1,0,0,0,48,362,1,0,0,0,50,371,1,0,0,0,52,378,1,0,0,0,54,385,
  	1,0,0,0,56,392,1,0,0,0,58,399,1,0,0,0,60,405,1,0,0,0,62,412,1,0,0,0,64,
  	414,1,0,0,0,66,416,1,0,0,0,68,418,1,0,0,0,70,420,1,0,0,0,72,422,1,0,0,
  	0,74,424,1,0,0,0,76,427,1,0,0,0,78,429,1,0,0,0,80,435,1,0,0,0,82,441,
  	1,0,0,0,84,443,1,0,0,0,86,445,1,0,0,0,88,447,1,0,0,0,90,449,1,0,0,0,92,
  	452,1,0,0,0,94,454,1,0,0,0,96,456,1,0,0,0,98,458,1,0,0,0,100,460,1,0,
  	0,0,102,462,1,0,0,0,104,464,1,0,0,0,106,484,1,0,0,0,108,510,1,0,0,0,110,
  	513,1,0,0,0,112,517,1,0,0,0,114,526,1,0,0,0,116,537,1,0,0,0,118,548,1,
  	0,0,0,120,564,1,0,0,0,122,568,1,0,0,0,124,570,1,0,0,0,126,572,1,0,0,0,
  	128,574,1,0,0,0,130,576,1,0,0,0,132,578,1,0,0,0,134,580,1,0,0,0,136,582,
  	1,0,0,0,138,584,1,0,0,0,140,586,1,0,0,0,142,588,1,0,0,0,144,590,1,0,0,
  	0,146,592,1,0,0,0,148,594,1,0,0,0,150,596,1,0,0,0,152,598,1,0,0,0,154,
  	600,1,0,0,0,156,602,1,0,0,0,158,604,1,0,0,0,160,606,1,0,0,0,162,608,1,
  	0,0,0,164,610,1,0,0,0,166,612,1,0,0,0,168,614,1,0,0,0,170,616,1,0,0,0,
  	172,618,1,0,0,0,174,620,1,0,0,0,176,622,1,0,0,0,178,624,1,0,0,0,180,629,
  	1,0,0,0,182,634,1,0,0,0,184,637,1,0,0,0,186,639,1,0,0,0,188,641,1,0,0,
  	0,190,643,1,0,0,0,192,645,1,0,0,0,194,647,1,0,0,0,196,649,1,0,0,0,198,
  	651,1,0,0,0,200,653,1,0,0,0,202,655,1,0,0,0,204,657,1,0,0,0,206,659,1,
  	0,0,0,208,661,1,0,0,0,210,663,1,0,0,0,212,665,1,0,0,0,214,667,1,0,0,0,
  	216,669,1,0,0,0,218,671,1,0,0,0,220,674,1,0,0,0,222,676,1,0,0,0,224,679,
  	1,0,0,0,226,682,1,0,0,0,228,685,1,0,0,0,230,688,1,0,0,0,232,691,1,0,0,
  	0,234,694,1,0,0,0,236,237,3,126,62,0,237,238,3,148,73,0,238,239,3,148,
  	73,0,239,3,1,0,0,0,240,241,3,126,62,0,241,242,3,152,75,0,242,243,3,132,
  	65,0,243,5,1,0,0,0,244,245,3,126,62,0,245,246,3,152,75,0,246,247,3,174,
  	86,0,247,7,1,0,0,0,248,249,3,126,62,0,249,250,3,162,80,0,250,9,1,0,0,
  	0,251,252,3,128,63,0,252,253,3,174,86,0,253,11,1,0,0,0,254,255,3,130,
  	64,0,255,256,3,154,76,0,256,257,3,152,75,0,257,258,3,162,80,0,258,259,
  	3,166,82,0,259,260,3,150,74,0,260,261,3,134,66,0,261,13,1,0,0,0,262,263,
  	3,132,65,0,263,264,3,142,70,0,264,265,3,162,80,0,265,266,3,164,81,0,266,
  	267,3,142,70,0,267,268,3,152,75,0,268,269,3,130,64,0,269,270,3,164,81,
  	0,270,15,1,0,0,0,271,272,3,134,66,0,272,273,3,168,83,0,273,274,3,134,
  	66,0,274,275,3,152,75,0,275,276,3,164,81,0,276,17,1,0,0,0,277,278,3,134,
  	66,0,278,279,3,168,83,0,279,280,3,134,66,0,280,281,3,152,75,0,281,282,
  	3,164,81,0,282,283,3,162,80,0,283,19,1,0,0,0,284,285,3,136,67,0,285,286,
  	3,142,70,0,286,287,3,148,73,0,287,288,3,164,81,0,288,289,3,134,66,0,289,
  	290,3,160,79,0,290,21,1,0,0,0,291,292,3,136,67,0,292,293,3,160,79,0,293,
  	294,3,154,76,0,294,295,3,150,74,0,295,23,1,0,0,0,296,297,3,140,69,0,297,
  	298,3,154,76,0,298,299,3,166,82,0,299,301,3,160,79,0,300,302,3,162,80,
  	0,301,300,1,0,0,0,301,302,1,0,0,0,302,25,1,0,0,0,303,304,3,142,70,0,304,
  	305,3,152,75,0,305,27,1,0,0,0,306,307,3,148,73,0,307,308,3,126,62,0,308,
  	309,3,162,80,0,309,310,3,164,81,0,310,29,1,0,0,0,311,312,3,148,73,0,312,
  	313,3,142,70,0,313,314,3,146,72,0,314,315,3,134,66,0,315,31,1,0,0,0,316,
  	317,3,150,74,0,317,318,3,126,62,0,318,319,3,172,85,0,319,33,1,0,0,0,320,
  	321,3,150,74,0,321,322,3,142,70,0,322,323,3,152,75,0,323,324,3,166,82,
  	0,324,325,3,164,81,0,325,327,3,134,66,0,326,328,3,162,80,0,327,326,1,
  	0,0,0,327,328,1,0,0,0,328,35,1,0,0,0,329,330,3,152,75,0,330,331,3,134,
  	66,0,331,332,3,172,85,0,332,333,3,164,81,0,333,37,1,0,0,0,334,335,3,152,
  	75,0,335,336,3,154,76,0,336,337,3,152,75,0,337,338,3,134,66,0,338,39,
  	1,0,0,0,339,340,3,152,75,0,340,341,3,154,76,0,341,342,3,164,81,0,342,
  	41,1,0,0,0,343,344,3,154,76,0,344,345,3,160,79,0,345,43,1,0,0,0,346,347,
  	3,156,77,0,347,348,3,126,62,0,348,349,3,160,79,0,349,350,3,164,81,0,350,
  	351,3,142,70,0,351,352,3,164,81,0,352,353,3,142,70,0,353,354,3,154,76,
  	0,354,355,3,152,75,0,355,45,1,0,0,0,356,357,3,160,79,0,357,358,3,126,
  	62,0,358,359,3,152,75,0,359,360,3,138,68,0,360,361,3,134,66,0,361,47,
  	1,0,0,0,362,363,3,162,80,0,363,364,3,134,66,0,364,365,3,130,64,0,365,
  	366,3,154,76,0,366,367,3,152,75,0,367,369,3,132,65,0,368,370,3,162,80,
  	0,369,368,1,0,0,0,369,370,1,0,0,0,370,49,1,0,0,0,371,372,3,162,80,0,372,
  	373,3,134,66,0,373,374,3,148,73,0,374,375,3,134,66,0,375,376,3,130,64,
  	0,376,377,3,164,81,0,377,51,1,0,0,0,378,379,3,162,80,0,379,380,3,164,
  	81,0,380,381,3,160,79,0,381,382,3,134,66,0,382,383,3,126,62,0,383,384,
  	3,150,74,0,384,53,1,0,0,0,385,386,3,162,80,0,386,387,3,164,81,0,387,388,
  	3,160,79,0,388,389,3,142,70,0,389,390,3,130,64,0,390,391,3,164,81,0,391,
  	55,1,0,0,0,392,393,3,166,82,0,393,394,3,152,75,0,394,395,3,148,73,0,395,
  	396,3,134,66,0,396,397,3,162,80,0,397,398,3,162,80,0,398,57,1,0,0,0,399,
  	400,3,170,84,0,400,401,3,140,69,0,401,402,3,134,66,0,402,403,3,160,79,
  	0,403,404,3,134,66,0,404,59,1,0,0,0,405,406,3,170,84,0,406,407,3,142,
  	70,0,407,408,3,164,81,0,408,409,3,140,69,0,409,410,3,142,70,0,410,411,
  	3,152,75,0,411,61,1,0,0,0,412,413,5,37,0,0,413,63,1,0,0,0,414,415,5,43,
  	0,0,415,65,1,0,0,0,416,417,5,45,0,0,417,67,1,0,0,0,418,419,5,42,0,0,419,
  	69,1,0,0,0,420,421,5,47,0,0,421,71,1,0,0,0,422,423,5,60,0,0,423,73,1,
  	0,0,0,424,425,5,60,0,0,425,426,5,61,0,0,426,75,1,0,0,0,427,428,5,62,0,
  	0,428,77,1,0,0,0,429,430,5,62,0,0,430,431,5,61,0,0,431,79,1,0,0,0,432,
  	433,5,61,0,0,433,436,5,61,0,0,434,436,5,61,0,0,435,432,1,0,0,0,435,434,
  	1,0,0,0,436,81,1,0,0,0,437,438,5,33,0,0,438,442,5,61,0,0,439,440,5,60,
  	0,0,440,442,5,62,0,0,441,437,1,0,0,0,441,439,1,0,0,0,442,83,1,0,0,0,443,
  	444,5,59,0,0,444,85,1,0,0,0,445,446,5,58,0,0,446,87,1,0,0,0,447,448,5,
  	44,0,0,448,89,1,0,0,0,449,450,5,46,0,0,450,451,5,46,0,0,451,91,1,0,0,
  	0,452,453,5,40,0,0,453,93,1,0,0,0,454,455,5,41,0,0,455,95,1,0,0,0,456,
  	457,5,91,0,0,457,97,1,0,0,0,458,459,5,93,0,0,459,99,1,0,0,0,460,461,5,
  	123,0,0,461,101,1,0,0,0,462,463,5,125,0,0,463,103,1,0,0,0,464,465,5,58,
  	0,0,465,466,5,43,0,0,466,105,1,0,0,0,467,473,5,96,0,0,468,472,8,0,0,0,
  	469,470,5,96,0,0,470,472,5,96,0,0,471,468,1,0,0,0,471,469,1,0,0,0,472,
  	475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,475,473,1,
  	0,0,0,476,485,5,96,0,0,477,481,7,1,0,0,478,480,7,2,0,0,479,478,1,0,0,
  	0,480,483,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,485,1,0,0,0,483,
  	481,1,0,0,0,484,467,1,0,0,0,484,477,1,0,0,0,485,107,1,0,0,0,486,487,3,
  	110,54,0,487,488,5,46,0,0,488,489,3,112,55,0,489,511,1,0,0,0,490,492,
  	3,110,54,0,491,490,1,0,0,0,491,492,1,0,0,0,492,493,1,0,0,0,493,495,5,
  	46,0,0,494,496,3,124,61,0,495,494,1,0,0,0,496,497,1,0,0,0,497,495,1,0,
  	0,0,497,498,1,0,0,0,498,511,1,0,0,0,499,501,3,110,54,0,500,499,1,0,0,
  	0,500,501,1,0,0,0,501,502,1,0,0,0,502,504,5,46,0,0,503,505,3,124,61,0,
  	504,503,1,0,0,0,505,506,1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,508,
  	1,0,0,0,508,509,3,112,55,0,509,511,1,0,0,0,510,486,1,0,0,0,510,491,1,
  	0,0,0,510,500,1,0,0,0,511,109,1,0,0,0,512,514,3,124,61,0,513,512,1,0,
  	0,0,514,515,1,0,0,0,515,513,1,0,0,0,515,516,1,0,0,0,516,111,1,0,0,0,517,
  	519,3,134,66,0,518,520,5,45,0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,522,
  	1,0,0,0,521,523,3,124,61,0,522,521,1,0,0,0,523,524,1,0,0,0,524,522,1,
  	0,0,0,524,525,1,0,0,0,525,113,1,0,0,0,526,532,5,39,0,0,527,531,8,3,0,
  	0,528,529,5,39,0,0,529,531,5,39,0,0,530,527,1,0,0,0,530,528,1,0,0,0,531,
  	534,1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,535,1,0,0,0,534,532,1,
  	0,0,0,535,536,5,39,0,0,536,115,1,0,0,0,537,538,5,45,0,0,538,539,5,45,
  	0,0,539,543,1,0,0,0,540,542,8,4,0,0,541,540,1,0,0,0,542,545,1,0,0,0,543,
  	541,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,543,1,0,0,0,546,547,6,
  	57,0,0,547,117,1,0,0,0,548,549,5,47,0,0,549,550,5,42,0,0,550,554,1,0,
  	0,0,551,553,9,0,0,0,552,551,1,0,0,0,553,556,1,0,0,0,554,555,1,0,0,0,554,
  	552,1,0,0,0,555,560,1,0,0,0,556,554,1,0,0,0,557,558,5,42,0,0,558,561,
  	5,47,0,0,559,561,5,0,0,1,560,557,1,0,0,0,560,559,1,0,0,0,561,562,1,0,
  	0,0,562,563,6,58,0,0,563,119,1,0,0,0,564,565,7,5,0,0,565,566,1,0,0,0,
  	566,567,6,59,0,0,567,121,1,0,0,0,568,569,9,0,0,0,569,123,1,0,0,0,570,
  	571,7,6,0,0,571,125,1,0,0,0,572,573,7,7,0,0,573,127,1,0,0,0,574,575,7,
  	8,0,0,575,129,1,0,0,0,576,577,7,9,0,0,577,131,1,0,0,0,578,579,7,10,0,
  	0,579,133,1,0,0,0,580,581,7,11,0,0,581,135,1,0,0,0,582,583,7,12,0,0,583,
  	137,1,0,0,0,584,585,7,13,0,0,585,139,1,0,0,0,586,587,7,14,0,0,587,141,
  	1,0,0,0,588,589,7,15,0,0,589,143,1,0,0,0,590,591,7,16,0,0,591,145,1,0,
  	0,0,592,593,7,17,0,0,593,147,1,0,0,0,594,595,7,18,0,0,595,149,1,0,0,0,
  	596,597,7,19,0,0,597,151,1,0,0,0,598,599,7,20,0,0,599,153,1,0,0,0,600,
  	601,7,21,0,0,601,155,1,0,0,0,602,603,7,22,0,0,603,157,1,0,0,0,604,605,
  	7,23,0,0,605,159,1,0,0,0,606,607,7,24,0,0,607,161,1,0,0,0,608,609,7,25,
  	0,0,609,163,1,0,0,0,610,611,7,26,0,0,611,165,1,0,0,0,612,613,7,27,0,0,
  	613,167,1,0,0,0,614,615,7,28,0,0,615,169,1,0,0,0,616,617,7,29,0,0,617,
  	171,1,0,0,0,618,619,7,30,0,0,619,173,1,0,0,0,620,621,7,31,0,0,621,175,
  	1,0,0,0,622,623,7,32,0,0,623,177,1,0,0,0,624,625,5,60,0,0,625,626,5,60,
  	0,0,626,627,1,0,0,0,627,628,6,88,1,0,628,179,1,0,0,0,629,630,5,62,0,0,
  	630,631,5,62,0,0,631,632,1,0,0,0,632,633,6,89,2,0,633,181,1,0,0,0,634,
  	635,5,92,0,0,635,636,5,62,0,0,636,183,1,0,0,0,637,638,5,124,0,0,638,185,
  	1,0,0,0,639,640,5,33,0,0,640,187,1,0,0,0,641,642,5,123,0,0,642,189,1,
  	0,0,0,643,644,5,125,0,0,644,191,1,0,0,0,645,646,5,40,0,0,646,193,1,0,
  	0,0,647,648,5,41,0,0,648,195,1,0,0,0,649,650,5,44,0,0,650,197,1,0,0,0,
  	651,652,5,63,0,0,652,199,1,0,0,0,653,654,5,43,0,0,654,201,1,0,0,0,655,
  	656,5,42,0,0,656,203,1,0,0,0,657,658,5,94,0,0,658,205,1,0,0,0,659,660,
  	5,45,0,0,660,207,1,0,0,0,661,662,5,91,0,0,662,209,1,0,0,0,663,664,5,93,
  	0,0,664,211,1,0,0,0,665,666,5,92,0,0,666,213,1,0,0,0,667,668,7,33,0,0,
  	668,215,1,0,0,0,669,670,5,46,0,0,670,217,1,0,0,0,671,672,5,46,0,0,672,
  	673,5,46,0,0,673,219,1,0,0,0,674,675,9,0,0,0,675,221,1,0,0,0,676,677,
  	5,92,0,0,677,678,5,100,0,0,678,223,1,0,0,0,679,680,5,92,0,0,680,681,5,
  	68,0,0,681,225,1,0,0,0,682,683,5,92,0,0,683,684,5,115,0,0,684,227,1,0,
  	0,0,685,686,5,92,0,0,686,687,5,83,0,0,687,229,1,0,0,0,688,689,5,92,0,
  	0,689,690,5,119,0,0,690,231,1,0,0,0,691,692,5,92,0,0,692,693,5,87,0,0,
  	693,233,1,0,0,0,694,695,7,6,0,0,695,235,1,0,0,0,24,0,1,301,327,369,435,
  	441,471,473,481,484,491,497,500,506,510,515,519,524,530,532,543,554,560,
  	3,0,1,0,2,1,0,2,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  ceqlquerylexerLexerStaticData = staticData.release();
}

}

CEQLQueryLexer::CEQLQueryLexer(CharStream *input) : Lexer(input) {
  CEQLQueryLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *ceqlquerylexerLexerStaticData->atn, ceqlquerylexerLexerStaticData->decisionToDFA, ceqlquerylexerLexerStaticData->sharedContextCache);
}

CEQLQueryLexer::~CEQLQueryLexer() {
  delete _interpreter;
}

std::string CEQLQueryLexer::getGrammarFileName() const {
  return "CEQLQueryLexer.g4";
}

const std::vector<std::string>& CEQLQueryLexer::getRuleNames() const {
  return ceqlquerylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CEQLQueryLexer::getChannelNames() const {
  return ceqlquerylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CEQLQueryLexer::getModeNames() const {
  return ceqlquerylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CEQLQueryLexer::getVocabulary() const {
  return ceqlquerylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CEQLQueryLexer::getSerializedATN() const {
  return ceqlquerylexerLexerStaticData->serializedATN;
}

const atn::ATN& CEQLQueryLexer::getATN() const {
  return *ceqlquerylexerLexerStaticData->atn;
}




void CEQLQueryLexer::initialize() {
  ::antlr4::internal::call_once(ceqlquerylexerLexerOnceFlag, ceqlquerylexerLexerInitialize);
}
