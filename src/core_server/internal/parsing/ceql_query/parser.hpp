#include <antlr4-runtime.h>

#include <string>

#include "autogenerated/CEQL_QUERYBaseVisitor.h"
#include "autogenerated/CEQL_QUERYLexer.h"
#include "autogenerated/CEQL_QUERYParser.h"
#include "visitors/select_visitor.hpp"
#include "visitors/from_visitor.hpp"
#include "core_server/internal/ceql/query/query.hpp"

namespace InternalCORECEQLParsing {

class QueryVisitor : public CEQL_QUERYBaseVisitor {
  // Override methods from the base visitor to handle
  // specific grammar rules as needed
};

class WhereVisitor;
class PartitionByVisitor;
class WithinSegmentVisitor;
class ConsumeByVisitor;

class Parser {
 public:
  static Query parse_query(std::string query) {
    // Convert the input string to a stream
    antlr4::ANTLRInputStream input(query);

    // Use the ANTLR input stream to create a lexer
    CEQL_QUERYLexer lexer(&input);

    // Use the lexer to create a token stream
    antlr4::CommonTokenStream tokens(&lexer);

    // Use the token stream to create a parser
    CEQL_QUERYParser parser(&tokens);

    // Parse the input
    antlr4::tree::ParseTree* tree = parser.parse();

    SelectVisitor select_visitor;
    select_visitor.visit(tree);
    Select select = select_visitor.get_parsed_select();

    FromVisitor from_visitor;
    from_visitor.visit(tree);
    From from = from_visitor.get_parsed_from();

    // Create a visitor
    // SelectVisitor select_visitor;
    // Select = select_visitor.select;
    // ....

    //return parsedQuery;
  }
};

}  // namespace Parsing
