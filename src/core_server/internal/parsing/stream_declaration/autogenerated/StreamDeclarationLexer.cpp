
// Generated from StreamDeclarationLexer.g4 by ANTLR 4.12.0


#include "StreamDeclarationLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct StreamDeclarationLexerStaticData final {
  StreamDeclarationLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  StreamDeclarationLexerStaticData(const StreamDeclarationLexerStaticData&) = delete;
  StreamDeclarationLexerStaticData(StreamDeclarationLexerStaticData&&) = delete;
  StreamDeclarationLexerStaticData& operator=(const StreamDeclarationLexerStaticData&) = delete;
  StreamDeclarationLexerStaticData& operator=(StreamDeclarationLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag streamdeclarationlexerLexerOnceFlag;
StreamDeclarationLexerStaticData *streamdeclarationlexerLexerStaticData = nullptr;

void streamdeclarationlexerLexerInitialize() {
  assert(streamdeclarationlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<StreamDeclarationLexerStaticData>(
    std::vector<std::string>{
      "K_ALL", "K_AND", "K_ANY", "K_AS", "K_BY", "K_CONSUME", "K_DECLARE", 
      "K_DISTINCT", "K_EVENT", "K_EVENTS", "K_FILTER", "K_FROM", "K_HOURS", 
      "K_IN", "K_LAST", "K_LIKE", "K_MAX", "K_MINUTES", "K_NEXT", "K_NONE", 
      "K_NOT", "K_OR", "K_PARTITION", "K_SECONDS", "K_SELECT", "K_STREAM", 
      "K_STRICT", "K_UNLESS", "K_WHERE", "K_WITHIN", "PERCENT", "PLUS", 
      "MINUS", "STAR", "SLASH", "LE", "LEQ", "GE", "GEQ", "EQ", "NEQ", "INT", 
      "STRING", "DOUBLE", "LONG", "BOOLEAN", "SEMICOLON", "COMMA", "DOUBLE_DOT", 
      "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", 
      "LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", "COLON", "IDENTIFIER", 
      "FLOAT_LITERAL", "INTEGER_LITERAL", "NUMERICAL_EXPONENT", "STRING_LITERAL", 
      "REGEXP", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR", 
      "DIGIT", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", 
      "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'%'", "'+'", 
      "'-'", "'*'", "'/'", "'<'", "'<='", "'>'", "'>='", "", "", "'int'", 
      "'string'", "'double'", "'long'", "'boolean'", "';'", "','", "'..'", 
      "'('", "')'", "'['", "']'", "'{'", "'}'", "':'"
    },
    std::vector<std::string>{
      "", "K_ALL", "K_AND", "K_ANY", "K_AS", "K_BY", "K_CONSUME", "K_DECLARE", 
      "K_DISTINCT", "K_EVENT", "K_EVENTS", "K_FILTER", "K_FROM", "K_HOURS", 
      "K_IN", "K_LAST", "K_LIKE", "K_MAX", "K_MINUTES", "K_NEXT", "K_NONE", 
      "K_NOT", "K_OR", "K_PARTITION", "K_SECONDS", "K_SELECT", "K_STREAM", 
      "K_STRICT", "K_UNLESS", "K_WHERE", "K_WITHIN", "PERCENT", "PLUS", 
      "MINUS", "STAR", "SLASH", "LE", "LEQ", "GE", "GEQ", "EQ", "NEQ", "INT", 
      "STRING", "DOUBLE", "LONG", "BOOLEAN", "SEMICOLON", "COMMA", "DOUBLE_DOT", 
      "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", 
      "LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", "COLON", "IDENTIFIER", 
      "FLOAT_LITERAL", "INTEGER_LITERAL", "NUMERICAL_EXPONENT", "STRING_LITERAL", 
      "REGEXP", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,66,607,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,
  	3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
  	1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
  	8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
  	1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,12,261,8,12,1,13,1,13,
  	1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
  	1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,287,8,17,1,18,1,18,1,18,
  	1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
  	1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,3,23,323,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,
  	1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,
  	3,39,389,8,39,1,40,1,40,1,40,1,40,3,40,395,8,40,1,41,1,41,1,41,1,41,1,
  	42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
  	44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,
  	46,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,
  	53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,56,5,56,453,8,56,10,56,12,
  	56,456,9,56,1,56,1,56,1,56,5,56,461,8,56,10,56,12,56,464,9,56,3,56,466,
  	8,56,1,57,1,57,1,57,1,57,1,57,3,57,473,8,57,1,57,1,57,4,57,477,8,57,11,
  	57,12,57,478,1,57,3,57,482,8,57,1,57,1,57,4,57,486,8,57,11,57,12,57,487,
  	1,57,1,57,3,57,492,8,57,1,58,4,58,495,8,58,11,58,12,58,496,1,59,1,59,
  	3,59,501,8,59,1,59,4,59,504,8,59,11,59,12,59,505,1,60,1,60,1,60,1,60,
  	5,60,512,8,60,10,60,12,60,515,9,60,1,60,1,60,1,61,1,61,1,62,1,62,1,62,
  	1,62,5,62,525,8,62,10,62,12,62,528,9,62,1,62,1,62,1,63,1,63,1,63,1,63,
  	5,63,536,8,63,10,63,12,63,539,9,63,1,63,1,63,1,63,3,63,544,8,63,1,63,
  	1,63,1,64,1,64,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,
  	1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,
  	1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,
  	1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,1,89,1,90,
  	1,90,1,91,1,91,1,92,1,92,1,537,0,93,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
  	8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
  	20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
  	63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
  	43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
  	54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,
  	64,129,65,131,66,133,0,135,0,137,0,139,0,141,0,143,0,145,0,147,0,149,
  	0,151,0,153,0,155,0,157,0,159,0,161,0,163,0,165,0,167,0,169,0,171,0,173,
  	0,175,0,177,0,179,0,181,0,183,0,185,0,1,0,33,1,0,96,96,3,0,65,90,95,95,
  	97,122,4,0,48,57,65,90,95,95,97,122,1,0,39,39,2,0,10,10,13,13,3,0,9,11,
  	13,13,32,32,1,0,48,57,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,
  	2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,
  	2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,
  	2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,
  	2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,115,
  	2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,
  	2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,122,602,0,1,1,0,0,0,
  	0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
  	0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
  	0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
  	1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
  	0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
  	0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
  	1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
  	0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
  	0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
  	1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
  	1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,
  	1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,
  	1,0,0,0,0,131,1,0,0,0,1,187,1,0,0,0,3,191,1,0,0,0,5,195,1,0,0,0,7,199,
  	1,0,0,0,9,202,1,0,0,0,11,205,1,0,0,0,13,213,1,0,0,0,15,221,1,0,0,0,17,
  	230,1,0,0,0,19,236,1,0,0,0,21,243,1,0,0,0,23,250,1,0,0,0,25,255,1,0,0,
  	0,27,262,1,0,0,0,29,265,1,0,0,0,31,270,1,0,0,0,33,275,1,0,0,0,35,279,
  	1,0,0,0,37,288,1,0,0,0,39,293,1,0,0,0,41,298,1,0,0,0,43,302,1,0,0,0,45,
  	305,1,0,0,0,47,315,1,0,0,0,49,324,1,0,0,0,51,331,1,0,0,0,53,338,1,0,0,
  	0,55,345,1,0,0,0,57,352,1,0,0,0,59,358,1,0,0,0,61,365,1,0,0,0,63,367,
  	1,0,0,0,65,369,1,0,0,0,67,371,1,0,0,0,69,373,1,0,0,0,71,375,1,0,0,0,73,
  	377,1,0,0,0,75,380,1,0,0,0,77,382,1,0,0,0,79,388,1,0,0,0,81,394,1,0,0,
  	0,83,396,1,0,0,0,85,400,1,0,0,0,87,407,1,0,0,0,89,414,1,0,0,0,91,419,
  	1,0,0,0,93,427,1,0,0,0,95,429,1,0,0,0,97,431,1,0,0,0,99,434,1,0,0,0,101,
  	436,1,0,0,0,103,438,1,0,0,0,105,440,1,0,0,0,107,442,1,0,0,0,109,444,1,
  	0,0,0,111,446,1,0,0,0,113,465,1,0,0,0,115,491,1,0,0,0,117,494,1,0,0,0,
  	119,498,1,0,0,0,121,507,1,0,0,0,123,518,1,0,0,0,125,520,1,0,0,0,127,531,
  	1,0,0,0,129,547,1,0,0,0,131,551,1,0,0,0,133,553,1,0,0,0,135,555,1,0,0,
  	0,137,557,1,0,0,0,139,559,1,0,0,0,141,561,1,0,0,0,143,563,1,0,0,0,145,
  	565,1,0,0,0,147,567,1,0,0,0,149,569,1,0,0,0,151,571,1,0,0,0,153,573,1,
  	0,0,0,155,575,1,0,0,0,157,577,1,0,0,0,159,579,1,0,0,0,161,581,1,0,0,0,
  	163,583,1,0,0,0,165,585,1,0,0,0,167,587,1,0,0,0,169,589,1,0,0,0,171,591,
  	1,0,0,0,173,593,1,0,0,0,175,595,1,0,0,0,177,597,1,0,0,0,179,599,1,0,0,
  	0,181,601,1,0,0,0,183,603,1,0,0,0,185,605,1,0,0,0,187,188,3,135,67,0,
  	188,189,3,157,78,0,189,190,3,157,78,0,190,2,1,0,0,0,191,192,3,135,67,
  	0,192,193,3,161,80,0,193,194,3,141,70,0,194,4,1,0,0,0,195,196,3,135,67,
  	0,196,197,3,161,80,0,197,198,3,183,91,0,198,6,1,0,0,0,199,200,3,135,67,
  	0,200,201,3,171,85,0,201,8,1,0,0,0,202,203,3,137,68,0,203,204,3,183,91,
  	0,204,10,1,0,0,0,205,206,3,139,69,0,206,207,3,163,81,0,207,208,3,161,
  	80,0,208,209,3,171,85,0,209,210,3,175,87,0,210,211,3,159,79,0,211,212,
  	3,143,71,0,212,12,1,0,0,0,213,214,3,141,70,0,214,215,3,143,71,0,215,216,
  	3,139,69,0,216,217,3,157,78,0,217,218,3,135,67,0,218,219,3,169,84,0,219,
  	220,3,143,71,0,220,14,1,0,0,0,221,222,3,141,70,0,222,223,3,151,75,0,223,
  	224,3,171,85,0,224,225,3,173,86,0,225,226,3,151,75,0,226,227,3,161,80,
  	0,227,228,3,139,69,0,228,229,3,173,86,0,229,16,1,0,0,0,230,231,3,143,
  	71,0,231,232,3,177,88,0,232,233,3,143,71,0,233,234,3,161,80,0,234,235,
  	3,173,86,0,235,18,1,0,0,0,236,237,3,143,71,0,237,238,3,177,88,0,238,239,
  	3,143,71,0,239,240,3,161,80,0,240,241,3,173,86,0,241,242,3,171,85,0,242,
  	20,1,0,0,0,243,244,3,145,72,0,244,245,3,151,75,0,245,246,3,157,78,0,246,
  	247,3,173,86,0,247,248,3,143,71,0,248,249,3,169,84,0,249,22,1,0,0,0,250,
  	251,3,145,72,0,251,252,3,169,84,0,252,253,3,163,81,0,253,254,3,159,79,
  	0,254,24,1,0,0,0,255,256,3,149,74,0,256,257,3,163,81,0,257,258,3,175,
  	87,0,258,260,3,169,84,0,259,261,3,171,85,0,260,259,1,0,0,0,260,261,1,
  	0,0,0,261,26,1,0,0,0,262,263,3,151,75,0,263,264,3,161,80,0,264,28,1,0,
  	0,0,265,266,3,157,78,0,266,267,3,135,67,0,267,268,3,171,85,0,268,269,
  	3,173,86,0,269,30,1,0,0,0,270,271,3,157,78,0,271,272,3,151,75,0,272,273,
  	3,155,77,0,273,274,3,143,71,0,274,32,1,0,0,0,275,276,3,159,79,0,276,277,
  	3,135,67,0,277,278,3,181,90,0,278,34,1,0,0,0,279,280,3,159,79,0,280,281,
  	3,151,75,0,281,282,3,161,80,0,282,283,3,175,87,0,283,284,3,173,86,0,284,
  	286,3,143,71,0,285,287,3,171,85,0,286,285,1,0,0,0,286,287,1,0,0,0,287,
  	36,1,0,0,0,288,289,3,161,80,0,289,290,3,143,71,0,290,291,3,181,90,0,291,
  	292,3,173,86,0,292,38,1,0,0,0,293,294,3,161,80,0,294,295,3,163,81,0,295,
  	296,3,161,80,0,296,297,3,143,71,0,297,40,1,0,0,0,298,299,3,161,80,0,299,
  	300,3,163,81,0,300,301,3,173,86,0,301,42,1,0,0,0,302,303,3,163,81,0,303,
  	304,3,169,84,0,304,44,1,0,0,0,305,306,3,165,82,0,306,307,3,135,67,0,307,
  	308,3,169,84,0,308,309,3,173,86,0,309,310,3,151,75,0,310,311,3,173,86,
  	0,311,312,3,151,75,0,312,313,3,163,81,0,313,314,3,161,80,0,314,46,1,0,
  	0,0,315,316,3,171,85,0,316,317,3,143,71,0,317,318,3,139,69,0,318,319,
  	3,163,81,0,319,320,3,161,80,0,320,322,3,141,70,0,321,323,3,171,85,0,322,
  	321,1,0,0,0,322,323,1,0,0,0,323,48,1,0,0,0,324,325,3,171,85,0,325,326,
  	3,143,71,0,326,327,3,157,78,0,327,328,3,143,71,0,328,329,3,139,69,0,329,
  	330,3,173,86,0,330,50,1,0,0,0,331,332,3,171,85,0,332,333,3,173,86,0,333,
  	334,3,169,84,0,334,335,3,143,71,0,335,336,3,135,67,0,336,337,3,159,79,
  	0,337,52,1,0,0,0,338,339,3,171,85,0,339,340,3,173,86,0,340,341,3,169,
  	84,0,341,342,3,151,75,0,342,343,3,139,69,0,343,344,3,173,86,0,344,54,
  	1,0,0,0,345,346,3,175,87,0,346,347,3,161,80,0,347,348,3,157,78,0,348,
  	349,3,143,71,0,349,350,3,171,85,0,350,351,3,171,85,0,351,56,1,0,0,0,352,
  	353,3,179,89,0,353,354,3,149,74,0,354,355,3,143,71,0,355,356,3,169,84,
  	0,356,357,3,143,71,0,357,58,1,0,0,0,358,359,3,179,89,0,359,360,3,151,
  	75,0,360,361,3,173,86,0,361,362,3,149,74,0,362,363,3,151,75,0,363,364,
  	3,161,80,0,364,60,1,0,0,0,365,366,5,37,0,0,366,62,1,0,0,0,367,368,5,43,
  	0,0,368,64,1,0,0,0,369,370,5,45,0,0,370,66,1,0,0,0,371,372,5,42,0,0,372,
  	68,1,0,0,0,373,374,5,47,0,0,374,70,1,0,0,0,375,376,5,60,0,0,376,72,1,
  	0,0,0,377,378,5,60,0,0,378,379,5,61,0,0,379,74,1,0,0,0,380,381,5,62,0,
  	0,381,76,1,0,0,0,382,383,5,62,0,0,383,384,5,61,0,0,384,78,1,0,0,0,385,
  	386,5,61,0,0,386,389,5,61,0,0,387,389,5,61,0,0,388,385,1,0,0,0,388,387,
  	1,0,0,0,389,80,1,0,0,0,390,391,5,33,0,0,391,395,5,61,0,0,392,393,5,60,
  	0,0,393,395,5,62,0,0,394,390,1,0,0,0,394,392,1,0,0,0,395,82,1,0,0,0,396,
  	397,5,105,0,0,397,398,5,110,0,0,398,399,5,116,0,0,399,84,1,0,0,0,400,
  	401,5,115,0,0,401,402,5,116,0,0,402,403,5,114,0,0,403,404,5,105,0,0,404,
  	405,5,110,0,0,405,406,5,103,0,0,406,86,1,0,0,0,407,408,5,100,0,0,408,
  	409,5,111,0,0,409,410,5,117,0,0,410,411,5,98,0,0,411,412,5,108,0,0,412,
  	413,5,101,0,0,413,88,1,0,0,0,414,415,5,108,0,0,415,416,5,111,0,0,416,
  	417,5,110,0,0,417,418,5,103,0,0,418,90,1,0,0,0,419,420,5,98,0,0,420,421,
  	5,111,0,0,421,422,5,111,0,0,422,423,5,108,0,0,423,424,5,101,0,0,424,425,
  	5,97,0,0,425,426,5,110,0,0,426,92,1,0,0,0,427,428,5,59,0,0,428,94,1,0,
  	0,0,429,430,5,44,0,0,430,96,1,0,0,0,431,432,5,46,0,0,432,433,5,46,0,0,
  	433,98,1,0,0,0,434,435,5,40,0,0,435,100,1,0,0,0,436,437,5,41,0,0,437,
  	102,1,0,0,0,438,439,5,91,0,0,439,104,1,0,0,0,440,441,5,93,0,0,441,106,
  	1,0,0,0,442,443,5,123,0,0,443,108,1,0,0,0,444,445,5,125,0,0,445,110,1,
  	0,0,0,446,447,5,58,0,0,447,112,1,0,0,0,448,454,5,96,0,0,449,453,8,0,0,
  	0,450,451,5,96,0,0,451,453,5,96,0,0,452,449,1,0,0,0,452,450,1,0,0,0,453,
  	456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,454,1,
  	0,0,0,457,466,5,96,0,0,458,462,7,1,0,0,459,461,7,2,0,0,460,459,1,0,0,
  	0,461,464,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,466,1,0,0,0,464,
  	462,1,0,0,0,465,448,1,0,0,0,465,458,1,0,0,0,466,114,1,0,0,0,467,468,3,
  	117,58,0,468,469,5,46,0,0,469,470,3,119,59,0,470,492,1,0,0,0,471,473,
  	3,117,58,0,472,471,1,0,0,0,472,473,1,0,0,0,473,474,1,0,0,0,474,476,5,
  	46,0,0,475,477,3,133,66,0,476,475,1,0,0,0,477,478,1,0,0,0,478,476,1,0,
  	0,0,478,479,1,0,0,0,479,492,1,0,0,0,480,482,3,117,58,0,481,480,1,0,0,
  	0,481,482,1,0,0,0,482,483,1,0,0,0,483,485,5,46,0,0,484,486,3,133,66,0,
  	485,484,1,0,0,0,486,487,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,489,
  	1,0,0,0,489,490,3,119,59,0,490,492,1,0,0,0,491,467,1,0,0,0,491,472,1,
  	0,0,0,491,481,1,0,0,0,492,116,1,0,0,0,493,495,3,133,66,0,494,493,1,0,
  	0,0,495,496,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,118,1,0,0,0,498,
  	500,3,143,71,0,499,501,5,45,0,0,500,499,1,0,0,0,500,501,1,0,0,0,501,503,
  	1,0,0,0,502,504,3,133,66,0,503,502,1,0,0,0,504,505,1,0,0,0,505,503,1,
  	0,0,0,505,506,1,0,0,0,506,120,1,0,0,0,507,513,5,39,0,0,508,512,8,3,0,
  	0,509,510,5,39,0,0,510,512,5,39,0,0,511,508,1,0,0,0,511,509,1,0,0,0,512,
  	515,1,0,0,0,513,511,1,0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,513,1,
  	0,0,0,516,517,5,39,0,0,517,122,1,0,0,0,518,519,3,121,60,0,519,124,1,0,
  	0,0,520,521,5,45,0,0,521,522,5,45,0,0,522,526,1,0,0,0,523,525,8,4,0,0,
  	524,523,1,0,0,0,525,528,1,0,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,529,
  	1,0,0,0,528,526,1,0,0,0,529,530,6,62,0,0,530,126,1,0,0,0,531,532,5,47,
  	0,0,532,533,5,42,0,0,533,537,1,0,0,0,534,536,9,0,0,0,535,534,1,0,0,0,
  	536,539,1,0,0,0,537,538,1,0,0,0,537,535,1,0,0,0,538,543,1,0,0,0,539,537,
  	1,0,0,0,540,541,5,42,0,0,541,544,5,47,0,0,542,544,5,0,0,1,543,540,1,0,
  	0,0,543,542,1,0,0,0,544,545,1,0,0,0,545,546,6,63,0,0,546,128,1,0,0,0,
  	547,548,7,5,0,0,548,549,1,0,0,0,549,550,6,64,0,0,550,130,1,0,0,0,551,
  	552,9,0,0,0,552,132,1,0,0,0,553,554,7,6,0,0,554,134,1,0,0,0,555,556,7,
  	7,0,0,556,136,1,0,0,0,557,558,7,8,0,0,558,138,1,0,0,0,559,560,7,9,0,0,
  	560,140,1,0,0,0,561,562,7,10,0,0,562,142,1,0,0,0,563,564,7,11,0,0,564,
  	144,1,0,0,0,565,566,7,12,0,0,566,146,1,0,0,0,567,568,7,13,0,0,568,148,
  	1,0,0,0,569,570,7,14,0,0,570,150,1,0,0,0,571,572,7,15,0,0,572,152,1,0,
  	0,0,573,574,7,16,0,0,574,154,1,0,0,0,575,576,7,17,0,0,576,156,1,0,0,0,
  	577,578,7,18,0,0,578,158,1,0,0,0,579,580,7,19,0,0,580,160,1,0,0,0,581,
  	582,7,20,0,0,582,162,1,0,0,0,583,584,7,21,0,0,584,164,1,0,0,0,585,586,
  	7,22,0,0,586,166,1,0,0,0,587,588,7,23,0,0,588,168,1,0,0,0,589,590,7,24,
  	0,0,590,170,1,0,0,0,591,592,7,25,0,0,592,172,1,0,0,0,593,594,7,26,0,0,
  	594,174,1,0,0,0,595,596,7,27,0,0,596,176,1,0,0,0,597,598,7,28,0,0,598,
  	178,1,0,0,0,599,600,7,29,0,0,600,180,1,0,0,0,601,602,7,30,0,0,602,182,
  	1,0,0,0,603,604,7,31,0,0,604,184,1,0,0,0,605,606,7,32,0,0,606,186,1,0,
  	0,0,23,0,260,286,322,388,394,452,454,462,465,472,478,481,487,491,496,
  	500,505,511,513,526,537,543,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  streamdeclarationlexerLexerStaticData = staticData.release();
}

}

StreamDeclarationLexer::StreamDeclarationLexer(CharStream *input) : Lexer(input) {
  StreamDeclarationLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *streamdeclarationlexerLexerStaticData->atn, streamdeclarationlexerLexerStaticData->decisionToDFA, streamdeclarationlexerLexerStaticData->sharedContextCache);
}

StreamDeclarationLexer::~StreamDeclarationLexer() {
  delete _interpreter;
}

std::string StreamDeclarationLexer::getGrammarFileName() const {
  return "StreamDeclarationLexer.g4";
}

const std::vector<std::string>& StreamDeclarationLexer::getRuleNames() const {
  return streamdeclarationlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& StreamDeclarationLexer::getChannelNames() const {
  return streamdeclarationlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& StreamDeclarationLexer::getModeNames() const {
  return streamdeclarationlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& StreamDeclarationLexer::getVocabulary() const {
  return streamdeclarationlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView StreamDeclarationLexer::getSerializedATN() const {
  return streamdeclarationlexerLexerStaticData->serializedATN;
}

const atn::ATN& StreamDeclarationLexer::getATN() const {
  return *streamdeclarationlexerLexerStaticData->atn;
}




void StreamDeclarationLexer::initialize() {
  ::antlr4::internal::call_once(streamdeclarationlexerLexerOnceFlag, streamdeclarationlexerLexerInitialize);
}
