#pragma once

#include <memory>

#include "core_server/internal/parsing/stream_declaration/autogenerated/StreamDeclarationParserBaseVisitor.h"
#include "core_server/internal/parsing/stream_declaration/event.hpp"
#include "core_server/internal/parsing/stream_declaration/event_attributes.hpp"

namespace CORE::Internal::Parsing::Declaration {
class EventVisitor : public StreamDeclarationParserBaseVisitor {
 private:
  std::string name;
  std::vector<std::unique_ptr<EventAttributes>> event_attributes;

 public:
  Event get_parsed_event() { return Event(name, std::move(event_attributes)); }

  virtual std::any
  visitEvent_declaration(StreamDeclarationParser::Event_declarationContext* ctx) override {
    auto event_name_ctx = ctx->event_name();
    name = event_name_ctx->getText();
    auto attribute_dec_list_ctx = ctx->attribute_dec_list();
    visit(attribute_dec_list_ctx);
    return {};
  }

  virtual std::any visitAttribute_dec_list(
    StreamDeclarationParser::Attribute_dec_listContext* ctx) override {
    auto attribute_declaration_ctx = ctx->attribute_declaration();
    for (size_t i = 0; i < attribute_declaration_ctx.size(); ++i) {
      visit(attribute_declaration_ctx[i]);
    }
    return {};
  }

  virtual std::any visitAttribute_declaration(
    StreamDeclarationParser::Attribute_declarationContext* ctx) override {
    std::string attribute_name = ctx->attribute_name()->getText();
    std::string datatype = ctx->datatype()->getText();
    event_attributes.push_back(
      std::make_unique<EventAttributes>(attribute_name, datatype));
    return {};
  }
};
}  // namespace CORE::Internal::Parsing::Declaration