#pragma once
#include <memory>

#include "core_server/internal/parsing/stream_declaration/autogenerated/StreamDeclarationParserBaseVisitor.h"
#include "core_server/internal/parsing/stream_declaration/event.hpp"
#include "core_server/internal/parsing/stream_declaration/stream.hpp"
#include "core_server/internal/parsing/stream_declaration/visitors/event_visitor.hpp"
#include "shared/datatypes/catalog/event_info.hpp"

namespace CORE::Internal::Parsing::Declaration {
class StreamVisitor : public StreamDeclarationParserBaseVisitor {
 private:
  std::string name;
  std::vector<Types::EventInfo> events;

 public:
  Stream get_parsed_stream() { return Stream(name, std::move(events)); }

  virtual std::any
  visitCore_declaration(StreamDeclarationParser::Core_declarationContext* ctx) {
    auto stream_declaration_ctx = ctx->stream_declaration();
    visit(stream_declaration_ctx);
    return {};
  }

  virtual std::any
  visitStream_declaration(StreamDeclarationParser::Stream_declarationContext* ctx) {
    name = ctx->stream_name()->getText();
    auto event_list_ctx = ctx->event_list();
    visit(event_list_ctx);
    return {};
  }

  virtual std::any visitEvent_list(StreamDeclarationParser::Event_listContext* ctx) {
    auto event_declaration_ctx = ctx->event_declaration();
    for (size_t i = 0; i < event_declaration_ctx.size(); ++i) {
      EventVisitor event_visitor;
      event_visitor.visit(event_declaration_ctx[i]);
      events.push_back(event_visitor.get_parsed_event());
    }
    return {};
  }
};
}  // namespace CORE::Internal::Parsing::Declaration
