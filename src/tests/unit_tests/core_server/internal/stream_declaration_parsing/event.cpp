#include "core_server/internal/parsing/stream_declaration/event.hpp"

#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_vector.hpp>

#include "core_server/internal/parsing/stream_declaration/autogenerated/StreamDeclarationLexer.h"
#include "core_server/internal/parsing/stream_declaration/autogenerated/StreamDeclarationParser.h"
#include "core_server/internal/parsing/stream_declaration/autogenerated/StreamDeclarationParserBaseVisitor.h"
#include "core_server/internal/parsing/stream_declaration/visitors/event_visitor.hpp"

namespace CORE::Internal::CEQL::UnitTests {

Parsing::Declaration::Event parse_event(std::string stream) {
  antlr4::ANTLRInputStream input(stream);
  StreamDeclarationLexer lexer(&input);
  antlr4::CommonTokenStream tokens(&lexer);
  StreamDeclarationParser parser(&tokens);
  antlr4::tree::ParseTree* tree = parser.parse();
  Parsing::Declaration::EventVisitor event_visitor;
  event_visitor.visit(tree);
  return event_visitor.get_parsed_event();
}

TEST_CASE("Correct event visitor parsing") {
  std::string stream =
    "DECLARE STREAM MySensor {\n"
    "EVENT Temp { ID:int, Value1:string, Value2:boolean }\n"
    "}";
  Parsing::Declaration::Event event = parse_event(stream);

  REQUIRE(event.name == "Temp");
  REQUIRE(event.event_attributes[0]->name == "ID");
  REQUIRE(event.event_attributes[0]->type == "int");

  REQUIRE(event.event_attributes[1]->name == "Value1");
  REQUIRE(event.event_attributes[1]->type == "string");

  REQUIRE(event.event_attributes[2]->name == "Value2");
  REQUIRE(event.event_attributes[2]->type == "boolean");
}
}  // namespace CORE::Internal::CEQL::UnitTests
