#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_vector.hpp>

#include "core_server/internal/ceql/cel_formula/formula/visitors/get_all_ceql_predicates.hpp"
#include "core_server/internal/ceql/query/query.hpp"
#include "core_server/internal/parsing/ceql_query/autogenerated/CEQL_QUERYLexer.h"
#include "core_server/internal/parsing/ceql_query/visitors/where_visitor.hpp"

using namespace InternalCORECEQLParsing;
using namespace InternalCORECEQL;

namespace COREFormulaVisitorGetAllPredicates {

Where parse_where(std::string query) {
  antlr4::ANTLRInputStream input(query);
  CEQL_QUERYLexer lexer(&input);
  antlr4::CommonTokenStream tokens(&lexer);
  CEQL_QUERYParser parser(&tokens);
  antlr4::tree::ParseTree* tree = parser.parse();
  WhereVisitor where_visitor;
  where_visitor.visit(tree);
  return where_visitor.get_parsed_where();
}

std::unique_ptr<Formula> parse_formula(std::string query) {
  return std::move(parse_where(query).formula);
}

TEST_CASE("get_all_ceql_predicates gets all predicates",
          "[ValueToMathExpr]") {
}
}  // namespace COREQueryParsingTestsValueToMathExpr
